package adapters

import (
	"context"
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"gorm.io/gorm"
	"log"
	"snakers-bot/internal/service"
	"snakers-bot/internal/usecases"
	"strings"
)

// –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–æ–∫. –≠—Ç–æ —Ö–æ—Ä–æ—à–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞.
const (
	buttonCatalog = "–ö–∞—Ç–∞–ª–æ–≥ üëü"
	buttonOrders  = "–ú–æ–∏ –∑–∞–∫–∞–∑—ã üì¶"
	buttonProfile = "–ü—Ä–æ—Ñ–∏–ª—å üë§"
)

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—à—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ–¥–∏–Ω —Ä–∞–∑, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–µ –≤–µ–∑–¥–µ.
var mainKeyboard = tgbotapi.NewReplyKeyboard(
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton(buttonCatalog),
		tgbotapi.NewKeyboardButton(buttonOrders),
	),
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton(buttonProfile),
	),
)

type BotHandler struct {
	bot            *tgbotapi.BotAPI
	userService    *service.UserService
	productService *service.ProductService
	orderService   *service.OrderService // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ä–≤–∏—Å –∑–∞–∫–∞–∑–æ–≤
}

// –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
func NewBotHandler(bot *tgbotapi.BotAPI, us *service.UserService, ps *service.ProductService, os *service.OrderService) *BotHandler {
	return &BotHandler{
		bot:            bot,
		userService:    us,
		productService: ps,
		orderService:   os,
	}
}

// –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, —á—Ç–æ–±—ã –æ–Ω —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–ª –Ω–∞ —Ç–µ–∫—Å—Ç
func (h *BotHandler) HandleUpdates(updates tgbotapi.UpdatesChannel) {
	for update := range updates {
		if update.Message == nil {
			continue
		}

		ctx := context.Background()

		// –¢–µ–ø–µ—Ä—å –º—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ –∫–æ–º–∞–Ω–¥—ã, –∏ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫ –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ
		switch update.Message.Text {
		case "/start":
			h.handleStart(ctx, update.Message)
		case buttonCatalog, "/catalog": // –†–µ–∞–≥–∏—Ä—É–µ–º –∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, –∏ –Ω–∞ –∫–æ–º–∞–Ω–¥—É
			h.handleCatalog(ctx, update.Message)
		case buttonOrders:
			h.handleMyOrders(ctx, update.Message)
		case buttonProfile:
			h.handleProfile(ctx, update.Message)
		default:
			h.handleDefault(update.Message)
		}
	}
}

func (h *BotHandler) handleStart(ctx context.Context, message *tgbotapi.Message) {

	if _, err := h.getOrCreateUser(ctx, message); err != nil {
		h.sendErrorMessage(message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.")
		return
	}

	responseText := fmt.Sprintf("–ü—Ä–∏–≤–µ—Ç, %s! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ —Å–∞–º—ã—Ö —Ç–æ–ø–æ–≤—ã—Ö —à—É–∑–æ–≤. –í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç üëá", message.From.FirstName)
	msg := tgbotapi.NewMessage(message.Chat.ID, responseText)

	// –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –Ω–∞—à—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
	msg.ReplyMarkup = mainKeyboard

	h.bot.Send(msg)
}

func (h *BotHandler) handleCatalog(ctx context.Context, message *tgbotapi.Message) {
	// ... –∫–æ–¥ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...
	products, err := h.productService.GetAllProducts(ctx)
	if err != nil {
		log.Printf("Failed to get products: %v", err)
		h.sendErrorMessage(message.Chat.ID, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤.")
		return
	}
	if len(products) == 0 {
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ö–∞—Ç–∞–ª–æ–≥ –ø–æ–∫–∞ –ø—É—Å—Ç. –ó–∞–≥–ª—è–Ω–∏—Ç–µ –ø–æ–ø–æ–∑–∂–µ!")
		h.bot.Send(msg)
		return
	}
	h.bot.Send(tgbotapi.NewMessage(message.Chat.ID, "–í–æ—Ç —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å:"))
	for _, p := range products {
		caption := fmt.Sprintf(
			"*%s*\n\n%s\n\n–¶–µ–Ω–∞: *%s —Ä—É–±.*",
			p.Name,
			p.Description,
			p.Price.StringFixed(2),
		)
		photoMsg := tgbotapi.NewPhoto(message.Chat.ID, tgbotapi.FileURL(p.ImageURL))
		photoMsg.Caption = caption
		photoMsg.ParseMode = tgbotapi.ModeMarkdown
		if _, err := h.bot.Send(photoMsg); err != nil {
			log.Printf("Failed to send product photo: %v", err)
		}
	}
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ –∑–∞–∫–∞–∑—ã"
func (h *BotHandler) handleMyOrders(ctx context.Context, message *tgbotapi.Message) {
	user, err := h.getOrCreateUser(ctx, message)
	if err != nil {
		h.sendErrorMessage(message.Chat.ID, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.")
		return
	}

	orders, err := h.orderService.GetUserOrders(ctx, user.ID)
	if err != nil {
		log.Printf("Failed to get user orders: %v", err)
		h.sendErrorMessage(message.Chat.ID, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∞—à–∏ –∑–∞–∫–∞–∑—ã.")
		return
	}

	if len(orders) == 0 {
		msg := tgbotapi.NewMessage(message.Chat.ID, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤. –ü–æ—Ä–∞ —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å! üòâ\n–ù–∞–∂–º–∏—Ç–µ '–ö–∞—Ç–∞–ª–æ–≥ üëü', —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∫—Ä–æ—Å—Å–æ–≤–∫–∏.")
		h.bot.Send(msg)
		return
	}

	var responseText strings.Builder
	responseText.WriteString("üßæ *–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:*\n\n")
	for _, order := range orders {
		responseText.WriteString(fmt.Sprintf(
			"üì¶ *–ó–∞–∫–∞–∑ #%d* –æ—Ç %s\n*–°—Ç–∞—Ç—É—Å:* %s\n\n",
			order.ID,
			order.Date.Format("02.01.2006"),
			order.Status,
		))
	}

	msg := tgbotapi.NewMessage(message.Chat.ID, responseText.String())
	msg.ParseMode = tgbotapi.ModeMarkdown
	h.bot.Send(msg)
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Ñ–∏–ª—å"
func (h *BotHandler) handleProfile(ctx context.Context, message *tgbotapi.Message) {
	user, err := h.getOrCreateUser(ctx, message)
	if err != nil {
		h.sendErrorMessage(message.Chat.ID, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.")
		return
	}

	responseText := fmt.Sprintf(
		"üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*\n\n"+
			"–ò–º—è: *%s*\n"+
			"–ë–∞–ª–∞–Ω—Å: *%s —Ä—É–±.*\n"+
			"–ë–æ–Ω—É—Å–Ω—ã–µ –±–∞–ª–ª—ã: *%d*",
		user.Name,
		user.Balance.StringFixed(2),
		user.LoyaltyPoints,
	)

	msg := tgbotapi.NewMessage(message.Chat.ID, responseText)
	msg.ParseMode = tgbotapi.ModeMarkdown
	h.bot.Send(msg)
}

func (h *BotHandler) handleDefault(message *tgbotapi.Message) {
	msg := tgbotapi.NewMessage(message.Chat.ID, "ü§î –ù–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.")
	h.bot.Send(msg)
}

func (h *BotHandler) sendErrorMessage(chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, text)
	h.bot.Send(msg)
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è/—Å–æ–∑–¥–∞–Ω–∏—è —é–∑–µ—Ä–∞
func (h *BotHandler) getOrCreateUser(ctx context.Context, message *tgbotapi.Message) (*usecases.User, error) {
	user, err := h.userService.GetUserByTelegramID(ctx, message.From.ID)
	if err != nil {
		if err == gorm.ErrRecordNotFound {
			newUser := &usecases.User{
				Name:       message.From.UserName,
				TelegramID: message.From.ID,
			}
			if err := h.userService.CreateUser(ctx, newUser); err != nil {
				log.Printf("Failed to create user: %v", err)
				return nil, err
			}
			log.Printf("New user created: %s, with ID: %d", newUser.Name, newUser.TelegramID)
			return newUser, nil
		}
		log.Printf("Failed to get user: %v", err)
		return nil, err
	}
	return user, nil
}
