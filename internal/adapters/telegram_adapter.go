package adapters

import (
	"context"
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"gorm.io/gorm"
	"io"
	"log"
	"net/http"
	"snakers-bot/internal/interfaces"
	"snakers-bot/internal/service"
	"snakers-bot/internal/usecases"
	"strconv"
	"strings"
	"time"
)

const (
	buttonCatalog = "–ö–∞—Ç–∞–ª–æ–≥ üëü"
	buttonOrders  = "–ú–æ–∏ –∑–∞–∫–∞–∑—ã üì¶"
	buttonProfile = "–ü—Ä–æ—Ñ–∏–ª—å üë§"
	buttonBalance = "–ë–∞–ª–∞–Ω—Å üí≥"

	callbackBuy   = "buy_"
	callbackTopUp = "top_up"
)

var mainKeyboard = tgbotapi.NewReplyKeyboard(
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton(buttonCatalog),
		tgbotapi.NewKeyboardButton(buttonOrders),
	),
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton(buttonProfile),
		tgbotapi.NewKeyboardButton(buttonBalance),
	),
)

type BotHandler struct {
	bot             *tgbotapi.BotAPI
	userService     *service.UserService
	productService  *service.ProductService
	orderService    *service.OrderService
	paymentProvider interfaces.PaymentProvider
}

func NewBotHandler(bot *tgbotapi.BotAPI, us *service.UserService, ps *service.ProductService, os *service.OrderService, pp interfaces.PaymentProvider) *BotHandler {
	return &BotHandler{
		bot:             bot,
		userService:     us,
		productService:  ps,
		orderService:    os,
		paymentProvider: pp,
	}
}

func (h *BotHandler) HandleUpdates(updates tgbotapi.UpdatesChannel) {
	for update := range updates {
		ctx := context.Background()

		if update.CallbackQuery != nil {
			h.handleCallbackQuery(ctx, update.CallbackQuery)
			continue
		}

		if update.Message != nil {
			switch update.Message.Text {
			case "/start":
				h.handleStart(ctx, update.Message)
			case buttonCatalog, "/catalog":
				h.handleCatalog(ctx, update.Message)
			case buttonOrders:
				h.handleMyOrders(ctx, update.Message)
			case buttonProfile:
				h.handleProfile(ctx, update.Message)
			case buttonBalance:
				h.handleBalance(ctx, update.Message)
			default:
				h.handleDefault(update.Message)
			}
		}
	}
}

func (h *BotHandler) handleCatalog(ctx context.Context, message *tgbotapi.Message) {
	products, err := h.productService.GetAllProducts(ctx)
	if err != nil {
		h.sendErrorMessage(message.Chat.ID, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤.")
		return
	}
	if len(products) == 0 {
		h.bot.Send(tgbotapi.NewMessage(message.Chat.ID, "–ö–∞—Ç–∞–ª–æ–≥ –ø–æ–∫–∞ –ø—É—Å—Ç."))
		return
	}

	h.bot.Send(tgbotapi.NewMessage(message.Chat.ID, "–í–æ—Ç —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å:"))

	for _, p := range products {
		fileBytes, err := downloadFile(p.ImageURL)
		if err != nil {
			log.Printf("Failed to download image %s: %v", p.ImageURL, err)
			continue
		}

		photoFile := tgbotapi.FileBytes{Name: p.Name + ".jpg", Bytes: fileBytes}
		photoMsg := tgbotapi.NewPhoto(message.Chat.ID, photoFile)

		photoMsg.Caption = fmt.Sprintf(
			"*%s*\n\n%s\n\n–¶–µ–Ω–∞: *%s —Ä—É–±.*",
			p.Name,
			p.Description,
			p.Price.StringFixed(2),
		)
		photoMsg.ParseMode = tgbotapi.ModeMarkdown

		buyButton := tgbotapi.NewInlineKeyboardButtonData("–ö—É–ø–∏—Ç—å üõí", fmt.Sprintf("%s%d", callbackBuy, p.ID))
		inlineKeyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(buyButton),
		)
		photoMsg.ReplyMarkup = &inlineKeyboard

		if _, err := h.bot.Send(photoMsg); err != nil {
			log.Printf("Failed to send product photo for product ID %d: %v", p.ID, err)
		}

		time.Sleep(300 * time.Millisecond)
	}
}
func (h *BotHandler) handleStart(ctx context.Context, message *tgbotapi.Message) {
	if _, err := h.getOrCreateUser(ctx, message); err != nil {
		h.sendErrorMessage(message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.")
		return
	}
	responseText := fmt.Sprintf("–ü—Ä–∏–≤–µ—Ç, %s! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ —Å–∞–º—ã—Ö —Ç–æ–ø–æ–≤—ã—Ö —à—É–∑–æ–≤. –í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç üëá", message.From.FirstName)
	msg := tgbotapi.NewMessage(message.Chat.ID, responseText)
	msg.ReplyMarkup = mainKeyboard
	h.bot.Send(msg)
}

func (h *BotHandler) handleBalance(ctx context.Context, message *tgbotapi.Message) {
	user, err := h.getOrCreateUser(ctx, message)
	if err != nil {
		h.sendErrorMessage(message.Chat.ID, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.")
		return
	}
	responseText := fmt.Sprintf("–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ: *%s —Ä—É–±.*", user.Balance.StringFixed(2))
	msg := tgbotapi.NewMessage(message.Chat.ID, responseText)
	msg.ParseMode = tgbotapi.ModeMarkdown
	topUpButton := tgbotapi.NewInlineKeyboardButtonData("–ü–æ–ø–æ–ª–Ω–∏—Ç—å", callbackTopUp)
	inlineKeyboard := tgbotapi.NewInlineKeyboardMarkup(tgbotapi.NewInlineKeyboardRow(topUpButton))
	msg.ReplyMarkup = &inlineKeyboard
	h.bot.Send(msg)
}

func (h *BotHandler) handleCallbackQuery(ctx context.Context, callback *tgbotapi.CallbackQuery) {
	h.bot.Send(tgbotapi.NewCallback(callback.ID, ""))
	if strings.HasPrefix(callback.Data, callbackBuy) {
		h.handleBuyCallback(ctx, callback)
	} else if callback.Data == callbackTopUp {
		h.handleTopUpCallback(ctx, callback)
	}
}

func (h *BotHandler) handleTopUpCallback(ctx context.Context, callback *tgbotapi.CallbackQuery) {
	dummyOrder := &usecases.Order{ID: 0}
	paymentDetails, err := h.paymentProvider.GeneratePaymentDetails(ctx, dummyOrder)
	if err != nil {
		log.Printf("Failed to generate payment details: %v", err)
		h.sendErrorMessage(callback.Message.Chat.ID, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã.")
		return
	}
	customText := "–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞, —Å–æ–≤–µ—Ä—à–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –ø–æ –æ–¥–Ω–æ–º—É –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤:\n\n" +
		strings.SplitN(paymentDetails, "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã:", 2)[1]
	msg := tgbotapi.NewMessage(callback.Message.Chat.ID, customText)
	msg.ParseMode = tgbotapi.ModeMarkdown
	h.bot.Send(msg)
}

func (h *BotHandler) handleBuyCallback(ctx context.Context, callback *tgbotapi.CallbackQuery) {
	productIDStr := strings.TrimPrefix(callback.Data, callbackBuy)
	productID, err := strconv.ParseUint(productIDStr, 10, 64)
	if err != nil {
		h.sendErrorMessage(callback.Message.Chat.ID, "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID —Ç–æ–≤–∞—Ä–∞.")
		return
	}
	user, err := h.getOrCreateUser(ctx, callback.Message)
	if err != nil {
		h.sendErrorMessage(callback.Message.Chat.ID, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.")
		return
	}
	product, err := h.productService.GetProductByID(ctx, uint(productID))
	if err != nil {
		h.sendErrorMessage(callback.Message.Chat.ID, "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
		return
	}
	newOrder := &usecases.Order{
		UserID:   user.ID,
		Status:   usecases.StatusAwaiting,
		Date:     time.Now(),
		Products: []usecases.Product{*product},
	}
	if err := h.orderService.CreateOrder(ctx, newOrder); err != nil {
		h.sendErrorMessage(callback.Message.Chat.ID, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑.")
		return
	}
	responseText := fmt.Sprintf("‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ó–∞–∫–∞–∑ *#%d* –Ω–∞ –∫—Ä–æ—Å—Å–æ–≤–∫–∏ *%s* —Å–æ–∑–¥–∞–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã.", newOrder.ID, product.Name)
	msg := tgbotapi.NewMessage(callback.Message.Chat.ID, responseText)
	msg.ParseMode = tgbotapi.ModeMarkdown
	h.bot.Send(msg)
}

func (h *BotHandler) handleMyOrders(ctx context.Context, message *tgbotapi.Message) {
	user, err := h.getOrCreateUser(ctx, message)
	if err != nil {
		h.sendErrorMessage(message.Chat.ID, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.")
		return
	}
	orders, err := h.orderService.GetUserOrders(ctx, user.ID)
	if err != nil {
		log.Printf("Failed to get user orders: %v", err)
		h.sendErrorMessage(message.Chat.ID, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∞—à–∏ –∑–∞–∫–∞–∑—ã.")
		return
	}
	if len(orders) == 0 {
		msg := tgbotapi.NewMessage(message.Chat.ID, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤. –ü–æ—Ä–∞ —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å! üòâ\n–ù–∞–∂–º–∏—Ç–µ '–ö–∞—Ç–∞–ª–æ–≥ üëü', —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∫—Ä–æ—Å—Å–æ–≤–∫–∏.")
		h.bot.Send(msg)
		return
	}
	var responseText strings.Builder
	responseText.WriteString("üßæ *–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:*\n\n")
	for _, order := range orders {
		responseText.WriteString(fmt.Sprintf(
			"üì¶ *–ó–∞–∫–∞–∑ #%d* –æ—Ç %s\n*–°—Ç–∞—Ç—É—Å:* %s\n\n",
			order.ID,
			order.Date.Format("02.01.2006"),
			order.Status,
		))
	}
	msg := tgbotapi.NewMessage(message.Chat.ID, responseText.String())
	msg.ParseMode = tgbotapi.ModeMarkdown
	h.bot.Send(msg)
}

func (h *BotHandler) handleProfile(ctx context.Context, message *tgbotapi.Message) {
	user, err := h.getOrCreateUser(ctx, message)
	if err != nil {
		h.sendErrorMessage(message.Chat.ID, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.")
		return
	}
	responseText := fmt.Sprintf(
		"üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*\n\n"+
			"–ò–º—è: *%s*\n"+
			"–ë–∞–ª–∞–Ω—Å: *%s —Ä—É–±.*\n"+
			"–ë–æ–Ω—É—Å–Ω—ã–µ –±–∞–ª–ª—ã: *%d*",
		user.Name,
		user.Balance.StringFixed(2),
		user.LoyaltyPoints,
	)
	msg := tgbotapi.NewMessage(message.Chat.ID, responseText)
	msg.ParseMode = tgbotapi.ModeMarkdown
	h.bot.Send(msg)
}

func (h *BotHandler) handleDefault(message *tgbotapi.Message) {
	msg := tgbotapi.NewMessage(message.Chat.ID, "ü§î –ù–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.")
	h.bot.Send(msg)
}

func (h *BotHandler) sendErrorMessage(chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, text)
	h.bot.Send(msg)
}

func (h *BotHandler) getOrCreateUser(ctx context.Context, message *tgbotapi.Message) (*usecases.User, error) {
	user, err := h.userService.GetUserByTelegramID(ctx, message.From.ID)
	if err != nil {
		if err == gorm.ErrRecordNotFound {
			newUser := &usecases.User{
				Name:       message.From.UserName,
				TelegramID: message.From.ID,
			}
			if err := h.userService.CreateUser(ctx, newUser); err != nil {
				log.Printf("Failed to create user: %v", err)
				return nil, err
			}
			log.Printf("New user created: %s, with ID: %d", newUser.Name, newUser.TelegramID)
			return newUser, nil
		}
		log.Printf("Failed to get user: %v", err)
		return nil, err
	}
	return user, nil
}

func downloadFile(url string) ([]byte, error) {
	resp, err := http.Get(url)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("bad status: %s", resp.Status)
	}

	bytes, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, err
	}

	return bytes, nil
}
